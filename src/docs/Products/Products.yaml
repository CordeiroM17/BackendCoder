paths:
  /api/products:
    get:
      summary: Get all the products
      tags:
        - Products
      responses:
        200:
          description: The products were returned satisfactorily
          content:
            application/json:
              schema:
                $ref: '#components/schemas/GetAllProducts'
        500:
          $ref: '#components/responses/ServerError'
          
    post:
      summary: Create a product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#components/requestBodies/CreateProduct'
      responses:
        201:
          description: (OK) Product created
          content:
            application/json:
              schema:
                $ref: '#components/schemas/CreateProduct'
        404:
            $ref: '#components/responses/ProductNotCreated'

  /api/products/{pid}:
    get:
      summary: Get a specific product by ID
      tags:
        - Products
      parameters:
        - $ref: '#components/parameters/ProductId'
      responses:
        200:
          description: (OK) Product found
          content:
            application/json:
              schema:
                $ref: '#components/schemas/ProductFound'
        404:
          $ref: '#components/responses/ProductNotFound'

    put:
      summary: Update a product from the ID
      tags:
        - Products
      parameters:
        - $ref: '#components/parameters/ProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/UpdateProduct'
      responses:
        200:
          description: Successfully modified product
          content:
            application/json:
              schema:
                $ref: '#components/schemas/ProductEdited'
        404:
          $ref: '#components/responses/ProductNotEdited'
    delete:
      summary: Delete a product from the ID
      tags:
        - Products
      parameters:
        - $ref: '#components/parameters/ProductId'
      responses:
        200:
          description: the product was successfully removed
          content:
            application/json:
              schema:
                $ref: '#components/schemas/ProductDelete'
        404:
          $ref: '#components/responses/ProductNotDeleted'
components:
  responses:
    ProductNotFound:
      description: (NotFound 404) Product or products not found

    ProductNotCreated:
      description: (ProductNotCreated 404) Product not Created

    ProductNotEdited:
      description: (ProductNotEdited 404) Product not edited, could not modify object

    ProductNotDeleted:
      description: (ProductNotCreated 404) Product not deleted or not exist

    ServerError:
      description: (ServerError 500) Error in the server

  requestBodies:
    CreateProduct:
      type: object
      properties:
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        thumbnail:
          type: string
          description: Product Image
        price:
          type: number
          description: Product price
        code:
          type: string
          description: Product code given by the owner
        stock:
          type: number
          description: Product stock
      example:
        title: "Air conditioner"
        description: "This is an air conditioner"
        thumbnail: "http://URLexample"
        price: 5000
        code: "abc100"
        stock: 50

    UpdateProduct:
      type: object
      properties:
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        thumbnail:
          type: string
          description: Product Image
        price:
          type: number
          description: Product price
        code:
          type: string
          description: Product code given by the owner
        stock:
          type: number
          description: Product stock
      example:
        title: "HearPhones"
        description: "This is a HearPhones"
        thumbnail: "http://URLexample"
        price: 5000
        code: "abc100"
        stock: 50

  parameters:
    ProductId: 
      name: pid
      in: path
      required: true
      description: ID's product being searched
      schema:
        type: string

  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: Id autogenerated by mongodb
        title:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        thumbnail:
          type: string
          description: Product Image
        price:
          type: number
          description: Product price
        code:
          type: string
          description: Product code given by the owner
        stock:
          type: number
          description: Product stock

    GetAllProducts:
      type: object
      properties:
        status: 
          type: string
          description: Success
        payload:
          type: array
          description: Array of all products
          items:
            $ref: '#/components/schemas/Product'
        totalPages:
          type: number
          description: Total number of pages
        prevPage:
          type: number
          description: Previous page number if available or NULL
        nextPage:
          type: number
          description: Next page number if available or NULL
        page:
          type: number
          description: Current page number
        hasPrevPage:
          type: boolean
          description: Availability of prev page
        hasNextPage:
          type: boolean
          description: Availability of next page.
      example:
        status: Success
        payload:
          - _id: "649acd4fe7b1eecdac3ee03"
            title: "smartphone samsung"
            description: "This is a smartphone samsung"
            thumbnail: "http://URLexample"
            price: 25000
            code: "abc000"
            stock: 5

          - _id: "64e9d98fed0ee21944572127"
            title: "smartphone iphone"
            description: "This is a smartphone iphone"
            thumbnail: "http://URLexample"
            price: 50000
            code: "abc001"
            stock: 10
        totalPages: 10
        prevPage: null
        nextPage: true
        page: 1
        hasPrevPage: false
        hasNextPage: true

    ProductFound:
      type: object
      properties:
        status: 
          type: string
          description: Success
        msg:
          type: string
          description: Product Found
        data:
          type: object
          description: Product
          $ref: '#/components/schemas/Product'
      example:
        status: Success
        msg: Product found
        data:
          _id: "649a1cd4fe7b1eecdac3ee03"
          title: "smartphone samsung"
          description: "This is a smartphone samsung"
          thumbnail: "http://URLexample"
          price: 25000
          code: "abc000"
          stock: 5
    
    CreateProduct:
      type: object
      properties:
        status: 
          type: string
          description: Success
        msg:
          type: string
          description: Product created
        data:
          type: object
          description: Product
          $ref: '#/components/schemas/Product'
      example:
        status: Success
        msg: Product created
        data:
          _id: "649a1cd4fe7b1eecdac3ee03"
          title: "smartphone samsung"
          description: "This is a smartphone samsung"
          thumbnail: "http://URLexample"
          price: 25000
          code: "abc000"
          stock: 5
    
    ProductEdited:
      type: object
      properties:
        status: 
          type: string
          description: Success
        msg:
          type: string
          description: Product created
        data:
          type: object
          description: Product
          $ref: '#/components/schemas/Product'
      example:
        status: Success
        msg: Product created
        data:
          title: "HearPhones"
          description: "This is a HearPhones"
          thumbnail: "http://URLexample"
          price: 5000
          code: "abc100"
          stock: 50
    
    ProductDelete:
      type: object
      properties:
        status: 
          type: string
          description: Success
        msg:
          type: string
          description: Product created
        data:
          type: object
          description: Product deleted
      example:
        status: Success
        msg: Product deleted
        data: {}